"""refactoring

Revision ID: c04fd5e0ad28
Revises: b4d212687cde
Create Date: 2025-05-10 17:14:45.125660

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c04fd5e0ad28'
down_revision: Union[str, None] = 'b4d212687cde'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('comment', sa.Column('created_at', sa.DateTime(), nullable=False))
    op.drop_column('comment', 'date_published')
    op.alter_column('notification', 'target_user_uuid',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.add_column('personmeta', sa.Column('created_user_uuid', sa.String(), nullable=False))
    op.add_column('personmeta', sa.Column('approved_at', sa.DateTime(), nullable=True))
    op.add_column('personmeta', sa.Column('approved_user_uuid', sa.String(), nullable=True))
    op.add_column('personmeta', sa.Column('created_at', sa.DateTime(), nullable=False))
    op.alter_column('personmeta', 'name_en',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('personmeta', 'name_jp',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_constraint('personmeta_user_approved_fkey', 'personmeta', type_='foreignkey')
    op.drop_constraint('personmeta_user_suggested_fkey', 'personmeta', type_='foreignkey')
    op.create_foreign_key(None, 'personmeta', 'user', ['created_user_uuid'], ['uuid'])
    op.create_foreign_key(None, 'personmeta', 'user', ['approved_user_uuid'], ['uuid'])
    op.drop_column('personmeta', 'date_suggested')
    op.drop_column('personmeta', 'user_suggested')
    op.drop_column('personmeta', 'date_approved')
    op.drop_column('personmeta', 'user_approved')
    op.add_column('report', sa.Column('created_user_uuid', sa.String(), nullable=False))
    op.add_column('report', sa.Column('created_at', sa.DateTime(), nullable=False))
    op.drop_constraint('report_reporter_uuid_fkey', 'report', type_='foreignkey')
    op.create_foreign_key(None, 'report', 'user', ['created_user_uuid'], ['uuid'])
    op.drop_column('report', 'reporter_uuid')
    op.drop_constraint('title_translate_team_id_fkey', 'title', type_='foreignkey')
    op.drop_column('title', 'translate_team_change_date')
    op.drop_column('title', 'translate_team_id')
    op.add_column('title_cover', sa.Column('created_user_uuid', sa.String(), nullable=False))
    op.add_column('title_cover', sa.Column('approved_at', sa.DateTime(), nullable=True))
    op.add_column('title_cover', sa.Column('approved_user_uuid', sa.String(), nullable=True))
    op.add_column('title_cover', sa.Column('created_at', sa.DateTime(), nullable=False))
    op.drop_constraint('title_cover_user_approved_fkey', 'title_cover', type_='foreignkey')
    op.drop_constraint('title_cover_user_suggested_fkey', 'title_cover', type_='foreignkey')
    op.create_foreign_key(None, 'title_cover', 'user', ['created_user_uuid'], ['uuid'])
    op.create_foreign_key(None, 'title_cover', 'user', ['approved_user_uuid'], ['uuid'])
    op.drop_column('title_cover', 'date_suggested')
    op.drop_column('title_cover', 'user_suggested')
    op.drop_column('title_cover', 'date_approved')
    op.drop_column('title_cover', 'user_approved')
    op.add_column('title_meta', sa.Column('created_user_uuid', sa.String(), nullable=False))
    op.add_column('title_meta', sa.Column('approved_at', sa.DateTime(), nullable=True))
    op.add_column('title_meta', sa.Column('approved_user_uuid', sa.String(), nullable=True))
    op.add_column('title_meta', sa.Column('created_at', sa.DateTime(), nullable=False))
    op.alter_column('title_meta', 'title_en',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('title_meta', 'title_jp',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_constraint('title_meta_user_approved_fkey', 'title_meta', type_='foreignkey')
    op.drop_constraint('title_meta_user_suggested_fkey', 'title_meta', type_='foreignkey')
    op.create_foreign_key(None, 'title_meta', 'user', ['created_user_uuid'], ['uuid'])
    op.create_foreign_key(None, 'title_meta', 'user', ['approved_user_uuid'], ['uuid'])
    op.drop_column('title_meta', 'date_suggested')
    op.drop_column('title_meta', 'user_suggested')
    op.drop_column('title_meta', 'date_approved')
    op.drop_column('title_meta', 'user_approved')
    op.add_column('user', sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False))
    op.drop_column('user', 'date_created')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user', sa.Column('date_created', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False))
    op.drop_column('user', 'created_at')
    op.add_column('title_meta', sa.Column('user_approved', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('title_meta', sa.Column('date_approved', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('title_meta', sa.Column('user_suggested', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('title_meta', sa.Column('date_suggested', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'title_meta', type_='foreignkey')
    op.drop_constraint(None, 'title_meta', type_='foreignkey')
    op.create_foreign_key('title_meta_user_suggested_fkey', 'title_meta', 'user', ['user_suggested'], ['uuid'])
    op.create_foreign_key('title_meta_user_approved_fkey', 'title_meta', 'user', ['user_approved'], ['uuid'])
    op.alter_column('title_meta', 'title_jp',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('title_meta', 'title_en',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_column('title_meta', 'created_at')
    op.drop_column('title_meta', 'approved_user_uuid')
    op.drop_column('title_meta', 'approved_at')
    op.drop_column('title_meta', 'created_user_uuid')
    op.add_column('title_cover', sa.Column('user_approved', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('title_cover', sa.Column('date_approved', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('title_cover', sa.Column('user_suggested', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('title_cover', sa.Column('date_suggested', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'title_cover', type_='foreignkey')
    op.drop_constraint(None, 'title_cover', type_='foreignkey')
    op.create_foreign_key('title_cover_user_suggested_fkey', 'title_cover', 'user', ['user_suggested'], ['uuid'])
    op.create_foreign_key('title_cover_user_approved_fkey', 'title_cover', 'user', ['user_approved'], ['uuid'])
    op.drop_column('title_cover', 'created_at')
    op.drop_column('title_cover', 'approved_user_uuid')
    op.drop_column('title_cover', 'approved_at')
    op.drop_column('title_cover', 'created_user_uuid')
    op.add_column('title', sa.Column('translate_team_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('title', sa.Column('translate_team_change_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.create_foreign_key('title_translate_team_id_fkey', 'title', 'translate_team', ['translate_team_id'], ['id'])
    op.add_column('report', sa.Column('reporter_uuid', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'report', type_='foreignkey')
    op.create_foreign_key('report_reporter_uuid_fkey', 'report', 'user', ['reporter_uuid'], ['uuid'])
    op.drop_column('report', 'created_at')
    op.drop_column('report', 'created_user_uuid')
    op.add_column('personmeta', sa.Column('user_approved', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('personmeta', sa.Column('date_approved', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('personmeta', sa.Column('user_suggested', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('personmeta', sa.Column('date_suggested', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'personmeta', type_='foreignkey')
    op.drop_constraint(None, 'personmeta', type_='foreignkey')
    op.create_foreign_key('personmeta_user_suggested_fkey', 'personmeta', 'user', ['user_suggested'], ['uuid'])
    op.create_foreign_key('personmeta_user_approved_fkey', 'personmeta', 'user', ['user_approved'], ['uuid'])
    op.alter_column('personmeta', 'name_jp',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('personmeta', 'name_en',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_column('personmeta', 'created_at')
    op.drop_column('personmeta', 'approved_user_uuid')
    op.drop_column('personmeta', 'approved_at')
    op.drop_column('personmeta', 'created_user_uuid')
    op.alter_column('notification', 'target_user_uuid',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.add_column('comment', sa.Column('date_published', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.drop_column('comment', 'created_at')
    # ### end Alembic commands ###
